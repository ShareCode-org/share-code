[{"/home/ilad/Desktop/Dev/share-code/src/index.js":"1","/home/ilad/Desktop/Dev/share-code/src/App.js":"2","/home/ilad/Desktop/Dev/share-code/src/components/navbar/index.js":"3","/home/ilad/Desktop/Dev/share-code/src/context/userContext.js":"4","/home/ilad/Desktop/Dev/share-code/src/context/isLoggingContext.js":"5","/home/ilad/Desktop/Dev/share-code/src/pages/code-page/index.js":"6","/home/ilad/Desktop/Dev/share-code/src/pages/edit-page/index.js":"7","/home/ilad/Desktop/Dev/share-code/src/pages/profile-page/index.js":"8","/home/ilad/Desktop/Dev/share-code/src/pages/leaderboard-page/index.js":"9","/home/ilad/Desktop/Dev/share-code/src/pages/404-page/index.js":"10","/home/ilad/Desktop/Dev/share-code/src/pages/home-page/index.js":"11","/home/ilad/Desktop/Dev/share-code/src/pages/post-page/index.js":"12","/home/ilad/Desktop/Dev/share-code/src/pages/sign-up-and-sign-in/index.js":"13","/home/ilad/Desktop/Dev/share-code/src/components/navbar/style.js":"14","/home/ilad/Desktop/Dev/share-code/src/pages/code-page/style.js":"15","/home/ilad/Desktop/Dev/share-code/src/pages/edit-page/style.js":"16","/home/ilad/Desktop/Dev/share-code/src/pages/leaderboard-page/style.js":"17","/home/ilad/Desktop/Dev/share-code/src/pages/profile-page/style.js":"18","/home/ilad/Desktop/Dev/share-code/src/pages/post-page/style.js":"19","/home/ilad/Desktop/Dev/share-code/src/pages/home-page/style.js":"20","/home/ilad/Desktop/Dev/share-code/src/pages/404-page/style.js":"21","/home/ilad/Desktop/Dev/share-code/src/pages/sign-up-and-sign-in/style.js":"22","/home/ilad/Desktop/Dev/share-code/src/actions/deletePost.js":"23","/home/ilad/Desktop/Dev/share-code/src/components/navbar-account/index.js":"24","/home/ilad/Desktop/Dev/share-code/src/actions/followUser.js":"25","/home/ilad/Desktop/Dev/share-code/src/actions/editPost.js":"26","/home/ilad/Desktop/Dev/share-code/src/actions/getUser.js":"27","/home/ilad/Desktop/Dev/share-code/src/actions/unFollowUser.js":"28","/home/ilad/Desktop/Dev/share-code/src/actions/editBio.js":"29","/home/ilad/Desktop/Dev/share-code/src/actions/getUsers.js":"30","/home/ilad/Desktop/Dev/share-code/src/actions/getPosts.js":"31","/home/ilad/Desktop/Dev/share-code/src/components/loader/index.js":"32","/home/ilad/Desktop/Dev/share-code/src/components/post-menu/index.js":"33","/home/ilad/Desktop/Dev/share-code/src/components/profile-modal/index.js":"34","/home/ilad/Desktop/Dev/share-code/src/components/code-card/index.js":"35","/home/ilad/Desktop/Dev/share-code/src/components/leaderboard-item/index.js":"36","/home/ilad/Desktop/Dev/share-code/src/components/post-form/index.js":"37","/home/ilad/Desktop/Dev/share-code/src/components/sign-up/index.js":"38","/home/ilad/Desktop/Dev/share-code/src/components/sign-in/index.js":"39","/home/ilad/Desktop/Dev/share-code/src/actions/getPost.js":"40","/home/ilad/Desktop/Dev/share-code/src/actions/signOut.js":"41","/home/ilad/Desktop/Dev/share-code/src/components/code-card/style.js":"42","/home/ilad/Desktop/Dev/share-code/src/actions/signUp.js":"43","/home/ilad/Desktop/Dev/share-code/src/actions/addPost.js":"44","/home/ilad/Desktop/Dev/share-code/src/actions/signIn.js":"45","/home/ilad/Desktop/Dev/share-code/src/components/post-form/style.js":"46","/home/ilad/Desktop/Dev/share-code/src/components/sign-in/style.js":"47","/home/ilad/Desktop/Dev/share-code/src/components/sign-up/style.js":"48","/home/ilad/Desktop/Dev/share-code/src/api/api.js":"49","/home/ilad/Desktop/Dev/share-code/src/components/post-button/index.js":"50","/home/ilad/Desktop/Dev/share-code/src/pages/raw-page/index.js":"51"},{"size":292,"mtime":1618747497688,"results":"52","hashOfConfig":"53"},{"size":3479,"mtime":1619039026728,"results":"54","hashOfConfig":"53"},{"size":2047,"mtime":1618747497688,"results":"55","hashOfConfig":"53"},{"size":105,"mtime":1618747497688,"results":"56","hashOfConfig":"53"},{"size":115,"mtime":1618747497688,"results":"57","hashOfConfig":"53"},{"size":2407,"mtime":1619383911323,"results":"58","hashOfConfig":"53"},{"size":1786,"mtime":1618747497688,"results":"59","hashOfConfig":"53"},{"size":9908,"mtime":1618747497688,"results":"60","hashOfConfig":"53"},{"size":2746,"mtime":1618747735348,"results":"61","hashOfConfig":"53"},{"size":466,"mtime":1618747497688,"results":"62","hashOfConfig":"53"},{"size":3029,"mtime":1618747859428,"results":"63","hashOfConfig":"53"},{"size":2192,"mtime":1619038063691,"results":"64","hashOfConfig":"53"},{"size":453,"mtime":1618748120538,"results":"65","hashOfConfig":"53"},{"size":1140,"mtime":1618747497688,"results":"66","hashOfConfig":"53"},{"size":795,"mtime":1618747497688,"results":"67","hashOfConfig":"53"},{"size":583,"mtime":1618747497688,"results":"68","hashOfConfig":"53"},{"size":614,"mtime":1618747497688,"results":"69","hashOfConfig":"53"},{"size":1552,"mtime":1618747497688,"results":"70","hashOfConfig":"53"},{"size":324,"mtime":1618747497688,"results":"71","hashOfConfig":"53"},{"size":2083,"mtime":1618747497688,"results":"72","hashOfConfig":"53"},{"size":615,"mtime":1618747497688,"results":"73","hashOfConfig":"53"},{"size":784,"mtime":1618747497688,"results":"74","hashOfConfig":"53"},{"size":465,"mtime":1618747497688,"results":"75","hashOfConfig":"53"},{"size":3621,"mtime":1618747497688,"results":"76","hashOfConfig":"53"},{"size":663,"mtime":1618747497688,"results":"77","hashOfConfig":"53"},{"size":741,"mtime":1618747497688,"results":"78","hashOfConfig":"53"},{"size":438,"mtime":1618747497688,"results":"79","hashOfConfig":"53"},{"size":1011,"mtime":1618747497688,"results":"80","hashOfConfig":"53"},{"size":274,"mtime":1618747497688,"results":"81","hashOfConfig":"53"},{"size":266,"mtime":1618747497688,"results":"82","hashOfConfig":"53"},{"size":375,"mtime":1618747497688,"results":"83","hashOfConfig":"53"},{"size":430,"mtime":1618747497688,"results":"84","hashOfConfig":"53"},{"size":3159,"mtime":1619384368231,"results":"85","hashOfConfig":"53"},{"size":684,"mtime":1618747497688,"results":"86","hashOfConfig":"53"},{"size":383,"mtime":1618747497688,"results":"87","hashOfConfig":"53"},{"size":412,"mtime":1618747497688,"results":"88","hashOfConfig":"53"},{"size":5470,"mtime":1618747497688,"results":"89","hashOfConfig":"53"},{"size":2521,"mtime":1618747497688,"results":"90","hashOfConfig":"53"},{"size":2473,"mtime":1618747497688,"results":"91","hashOfConfig":"53"},{"size":534,"mtime":1618747497688,"results":"92","hashOfConfig":"53"},{"size":350,"mtime":1618747497688,"results":"93","hashOfConfig":"53"},{"size":540,"mtime":1618747497688,"results":"94","hashOfConfig":"53"},{"size":344,"mtime":1618747497688,"results":"95","hashOfConfig":"53"},{"size":586,"mtime":1618747497688,"results":"96","hashOfConfig":"53"},{"size":612,"mtime":1618747497688,"results":"97","hashOfConfig":"53"},{"size":594,"mtime":1618747497688,"results":"98","hashOfConfig":"53"},{"size":404,"mtime":1618747497688,"results":"99","hashOfConfig":"53"},{"size":404,"mtime":1618747497688,"results":"100","hashOfConfig":"53"},{"size":182,"mtime":1618747497688,"results":"101","hashOfConfig":"53"},{"size":721,"mtime":1618747497688,"results":"102","hashOfConfig":"53"},{"size":551,"mtime":1619040111962,"results":"103","hashOfConfig":"53"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},"aykeor",{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"106"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"106"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"106"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"106"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"106"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"106"},"/home/ilad/Desktop/Dev/share-code/src/index.js",[],["213","214"],"/home/ilad/Desktop/Dev/share-code/src/App.js",["215"],"import React, { useState, useEffect, useMemo } from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { isExpired, decodeToken } from 'react-jwt';\nimport isLoggingContext from './context/isLoggingContext';\nimport UserContext from './context/userContext';\nimport Navbar from './components/navbar/index';\nimport { ToastContainer } from 'react-toastify';\nimport HomePage from './pages/home-page/index';\nimport LeaderboardPage from './pages/leaderboard-page/index';\nimport PostPage from './pages/post-page/index';\nimport CodePage from './pages/code-page/index';\nimport EditPage from './pages/edit-page/index';\nimport RawPage from './pages/raw-page/index';       \nimport ProfilePage from './pages/profile-page/index';\nimport SignUpAndSignIn from './pages/sign-up-and-sign-in/index';\nimport NotFound from './pages/404-page/index';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './App.css';\n\nconst App = () => {\n    const [user, setUser] = useState(decodeToken(localStorage.getItem('token')));\n    const [isLogging, setIsLogging] = useState(false);\n    const UserProvider = useMemo(() => ({ user, setUser }), [user, setUser]);\n    const isLoggingProvider = useMemo(() => ({ isLogging, setIsLogging }), [isLogging, setIsLogging]);\n    const isTokenExpired = isExpired(localStorage.getItem('token'));\n\n    useEffect(() => {\n        if (isTokenExpired) {\n            localStorage.setItem('token', '');\n            localStorage.setItem('isLogging', false);\n            setUser();\n            setIsLogging(false);\n        };\n\n        const data = localStorage.getItem('isLogging');\n        setIsLogging(JSON.parse(data));\n\n        document.title = 'ShareCode';\n    }, []);\n\n    return (\n        <div>\n            <div className=\"App\">\n                <UserContext.Provider value={UserProvider}>\n                    <isLoggingContext.Provider value={isLoggingProvider}>\n                        <Navbar />\n                        <ToastContainer\n                            position=\"bottom-right\"\n                            autoClose={1500}\n                        />\n                        <Switch>\n                            <Route exact path=\"/\" component={HomePage} />\n                            <Route exact path=\"/leaderboard\" component={LeaderboardPage} />\n                            <Route exact path=\"/post\" component={PostPage} />\n                            <Route exact path={`/post/:id`} component={CodePage} />\n                            <Route exact path={`/post/:id/edit`} component={EditPage} />\n                            <Route exact path={`/post/:id/raw`} component={RawPage} />\n\t\t\t\t\t\t    <Route exact path={`/profile/:id`} component={ProfilePage} />\n                            <Route exact path=\"/sign-up-and-sign-in\">\n                                {\n                                    isLogging ? (\n                                        <Redirect to=\"/\" />\n                                    ) : (\n                                        <SignUpAndSignIn />\n                                    )\n                                }\n                            </Route>\n                            <Route component={NotFound} />\n                        </Switch>\n                    </isLoggingContext.Provider>\n                </UserContext.Provider>\n            </div>\n            <h1 className=\"app-not-working\">\n                Website don't work in mobile.\n            </h1>\n        </div>\n    )\n};\n\nexport default App;","/home/ilad/Desktop/Dev/share-code/src/components/navbar/index.js",[],"/home/ilad/Desktop/Dev/share-code/src/context/userContext.js",[],"/home/ilad/Desktop/Dev/share-code/src/context/isLoggingContext.js",[],"/home/ilad/Desktop/Dev/share-code/src/pages/code-page/index.js",["216"],"/home/ilad/Desktop/Dev/share-code/src/pages/edit-page/index.js",["217"],"import React, { useState, useEffect } from 'react';\nimport { useParams, Prompt } from 'react-router';\nimport getPost from '../../actions/getPost';\nimport editPost from '../../actions/editPost';\nimport { EditPageDiv, EditPageBottom, EditInput, EditTextArea, EditButton, SaveButton } from './style';\n\nconst EditPage = () => {\n    const { id } = useParams();\n    const [post, setPost] = useState({});\n\n    useEffect(() => {\n        var load = false;\n        getPost({\n            id,\n            setPost,\n            load\n        });\n    }, []);\n\n    return (\n        <EditPageDiv>\n            <Prompt\n                message={() => {\n                    \"\"\n                    document.title = 'ShareCode'\n                }}\n            />\n            <div>\n                <EditInput\n                    placeholder='Title'\n                    value={post.title}\n                    onChange={(e) => setPost({ ...post, title: e.target.value })}\n                />\n            </div>\n            <div>\n                <EditInput\n                    placeholder='Description'\n                    value={post.description}\n                    onChange={(e) => setPost({ ...post, description: e.target.value })}\n                />\n            </div>\n            <div>\n                <EditTextArea\n                    placeholder='Code'\n                    value={post.code}\n                    onChange={(e) => setPost({ ...post, code: e.target.value })}\n                />\n            </div>\n            <EditPageBottom>\n                <EditButton onClick={() => window.location.href = `/post/${id}`}>Cancel</EditButton>\n                <SaveButton onClick={() => editPost({ post })}>Save</SaveButton>\n            </EditPageBottom>\n        </EditPageDiv>\n    )\n};\n\nexport default EditPage;","/home/ilad/Desktop/Dev/share-code/src/pages/profile-page/index.js",["218","219","220","221"],"import React, { useState, useEffect, useContext } from 'react';\nimport { useParams, Prompt } from 'react-router';\nimport UserContext from '../../context/userContext';\nimport getUser from '../../actions/getUser';\nimport followUser from '../../actions/followUser';\nimport unFollowUser from '../../actions/unFollowUser';\nimport editBio from '../../actions/editBio';\nimport Loader from '../../components/loader/index';\nimport ProfileModale from '../../components/profile-modal/index';\nimport CodeCard from '../../components/code-card/index';\nimport AccountSvg from '../../assests/account.svg';\nimport {\n    ProfileDiv,\n    ProfilesDiv,\n    ProfileInfoDiv,\n    ProfilePicture,\n    ProfileUsername,\n    ProfileStatsDiv,\n    ProfileSpan,\n    ProfileBio,\n    ProfileBioInput,\n    ProfileButton,\n    SaveButton,\n    ProfileMessage\n} from './style';\n\nconst ProfilePage = () => {\n    const { id } = useParams();\n\n    const [modals, setModals] = useState({\n        postsModal: false,\n        followersModal: false,\n        followingModal: false\n    });\n    const [loading, setLoading] = useState(true);\n    const { user } = useContext(UserContext);\n    const [isFollowing, setIsFollowing] = useState();\n    const [isEditing, setIsEditing] = useState(false);\n    const [profile, setProfile] = useState({});\n\n    useEffect(() => {\n        let load = true;\n        getUser({ id, setProfile, load, setLoading })\n    }, []);\n\n    useEffect(() => {\n        let followers = user.followers || [];\n        followers.forEach(element => {\n            if (element._id === user.userId, element.username === user.username)\n                setIsFollowing(true);\n            else\n                setIsFollowing(false);\n        });\n    }, [profile]);\n\n    return (\n        <div>\n            <Prompt\n                message={() => {\n                    \"\"\n                    document.title = 'ShareCode'\n                }}\n            />\n            {!loading ? (\n                <ProfileDiv>\n                    <ProfileModale\n                        Content={\n                            <div>\n                                {profile.posts.length ? (\n                                    profile.posts.map((post, index) => (\n                                        <CodeCard\n                                            key={index}\n                                            title={post.title}\n                                            description={post.description}\n                                            id={post._id}\n                                        />\n                                    ))\n                                ) : (\n                                    <ProfileMessage>There is no posts.</ProfileMessage>\n                                )}\n                            </div>\n                        }\n                        modalIsOpen={modals.postsModal}\n                        setIsOpen={setModals}\n                    />\n                    <ProfileModale\n                        Content={\n                            <div>\n                                {profile.followers.length ? (\n                                    profile.followers.map((user, index) => (\n                                        <ProfilesDiv key={index}>\n                                            <ProfilePicture src={AccountSvg} />\n                                            <div>\n                                                <h1\n                                                    style={{ marginLeft: '10px', cursor: 'pointer' }}\n                                                    onClick={() => window.location.href = `/profile/${user.username}`}\n                                                >\n                                                    {user.username}\n                                                </h1>\n                                            </div>\n                                        </ProfilesDiv>\n                                    ))\n                                ) : (\n                                    <ProfileMessage>There is no followers.</ProfileMessage>\n                                )}\n                            </div>\n                        }\n                        modalIsOpen={modals.followersModal}\n                        setIsOpen={setModals}\n                    />\n                    <ProfileModale\n                        Content={\n                            <div>\n                                {profile.following.length ? (\n                                    profile.following.map((user, index) => (\n                                        <ProfilesDiv key={index}>\n                                            <ProfilePicture src={AccountSvg} />\n                                            <div>\n                                                <h1\n                                                    style={{ marginLeft: '10px', cursor: 'pointer' }}\n                                                    onClick={() => window.location.href = `/profile/${user.username}`}\n                                                >\n                                                    {user.username}\n                                                </h1>\n                                            </div>\n                                        </ProfilesDiv>\n                                    ))\n                                ) : (\n                                    <ProfileMessage>There is no following.</ProfileMessage>\n                                )}\n                            </div>\n                        }\n                        modalIsOpen={modals.followingModal}\n                        setIsOpen={setModals}\n                    />\n                    <ProfileInfoDiv>\n                        <div>\n                            <ProfilePicture src={AccountSvg} />\n                        </div>\n                        <div>\n                            <ProfileUsername>{profile.username}</ProfileUsername>\n                            <ProfileSpan>{profile.role || \"Member\"}</ProfileSpan>\n                            <ProfileStatsDiv>\n                                <ProfileSpan onClick={() => setModals({ ...modals, postsModal: true })}>{profile.posts.length || 0} posts</ProfileSpan>\n                                <ProfileSpan onClick={() => setModals({ ...modals, followersModal: true })}>{profile.followers.length || 0} followers</ProfileSpan>\n                                <ProfileSpan onClick={() => setModals({ ...modals, followingModal: true })}>{profile.following.length || 0} following</ProfileSpan>\n                            </ProfileStatsDiv>\n                            {isEditing ? ''\n                                : (\n                                    <ProfileBio>\n                                        {profile.bio || \"The bio is empty.\"}\n                                    </ProfileBio>\n                                )\n                            }\n                            {\n                                user === null ?\n                                    '' : (\n                                        user.username === profile.username ? (\n                                            isEditing ? (\n                                                <div>\n                                                    <ProfileBioInput\n                                                        placeholder='The bio is empty.'\n                                                        maxlength='32'\n                                                        value={profile.bio}\n                                                        onChange={(e) => setProfile({ ...profile, bio: e.target.value })}\n                                                    />\n                                                    <div>\n                                                        <ProfileButton onClick={() => window.location.href = window.location.href}>Cancel</ProfileButton>\n                                                        <SaveButton onClick={() => editBio({ id, profile })}>Save</SaveButton>\n                                                    </div>\n                                                </div>\n                                            ) : (\n                                                <ProfileButton onClick={() => setIsEditing(true)}>Edit</ProfileButton>\n                                            )\n                                        ) : (\n                                            <div>\n                                                {isFollowing ? (\n                                                    <ProfileButton\n                                                        onClick={() => unFollowUser({ id, profile, user, setProfile, setIsFollowing, getUser })}\n                                                    >\n                                                        Unfollow\n                                                    </ProfileButton>\n                                                ) : (\n                                                    <ProfileButton\n                                                        onClick={() => followUser({ id, profile, user, setProfile, setIsFollowing, getUser })}\n                                                    >\n                                                        Follow\n                                                    </ProfileButton>\n                                                )}\n                                            </div>\n                                        )\n                                    )\n                            }\n                        </div>\n                    </ProfileInfoDiv>\n                </ProfileDiv>\n            ) : (\n                <div>\n                    <Loader loading={loading} />\n                </div>\n            )}\n\n        </div>\n    )\n};\n\nexport default ProfilePage;\n","/home/ilad/Desktop/Dev/share-code/src/pages/leaderboard-page/index.js",["222","223"],"import React, { useState, useEffect } from 'react';\nimport Loader from '../../components/loader/index';\nimport LeaderboardItem from '../../components/leaderboard-item/index';\nimport getUsers from '../../actions/getUsers';\nimport { LeaderboardDivContainner, LeaderboardMessage } from './style';\n\nconst LeaderboardPage = () => {\n    const LocalIsLogging = JSON.parse(localStorage.getItem('isLogging'));\n    const [users, setUsers] = useState([]);\n    const [listOfUsers] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        if (LocalIsLogging) {\n            getUsers({ setUsers, setLoading, loading });\n        } else {\n            setLoading(false);\n        }\n\n        document.title = 'ShareCode | Leaderboard'\n    }, []);\n\n    useEffect(() => {\n        if (LocalIsLogging) {\n            users.forEach(element => {\n                listOfUsers.push({\n                    id: element._id,\n                    username: element.username,\n                    posts: element.posts,\n                    followers: element.followers\n                })\n            });\n\n            listOfUsers.sort(function (a, b) {\n                let ResultA = a.posts.length + a.followers.length;\n                let ResultB = b.posts.length + b.followers.length;\n\n                return ResultB - ResultA;\n            });\n\n        } else {\n            setLoading(false);\n        }\n    }, [users]);\n\n    return (\n        <div>\n            {!loading ? (\n                LocalIsLogging ? (\n                    <LeaderboardDivContainner>\n                        <table>\n                            <tr>\n                                <th>#</th>\n                                <th>Username</th>\n                                <th>Posts</th>\n                                <th>Followers</th>\n                            </tr>\n                            {listOfUsers.map((user, index) => (\n                                <LeaderboardItem\n                                    key={index}\n                                    Number={index}\n                                    Username={user.username}\n                                    postsNumber={user.posts.length}\n                                    followersNumber={user.followers.length}\n                                />\n                            ))}\n                        </table>\n\n\n                    </LeaderboardDivContainner>\n                ) : (\n                    <LeaderboardMessage>You need to login in to see the leaderboard.</LeaderboardMessage>\n                )\n            ) : (\n                <div>\n                    <Loader loading={loading} />\n                </div>\n            )}\n        </div>\n    )\n};\n\nexport default LeaderboardPage;\n\n","/home/ilad/Desktop/Dev/share-code/src/pages/404-page/index.js",[],"/home/ilad/Desktop/Dev/share-code/src/pages/home-page/index.js",[],"/home/ilad/Desktop/Dev/share-code/src/pages/post-page/index.js",["224"],"import React, { useState, useContext, useEffect } from 'react';\nimport isLoggingContext from '../../context/isLoggingContext';\nimport getPosts from '../../actions/getPosts';\nimport Loader from '../../components/loader/index';\nimport CodeCard from '../../components/code-card/index';\nimport PostForm from '../../components/post-form/index';\nimport { PostsDiv, PostMessage } from './style';\n\nconst PostPage = () => {\n    const LocalIsLogging = JSON.parse(localStorage.getItem('isLogging'));\n    const [posts, setPosts] = useState([]);\n    const { isLogging } = useContext(isLoggingContext);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        if (LocalIsLogging) {\n            var load = true;\n            getPosts({ setPosts, setLoading, loading, load });\n\n        } else {\n            setLoading(false);\n        }\n\n        document.title = 'ShareCode | Post'\n    }, []);\n\n    return (\n        <div>\n            {!loading ? (\n                isLogging ? (\n                    posts.length ? (\n                        <div>\n                            <PostsDiv>\n                                {posts.map((post, index) => (\n                                    <CodeCard\n                                        key={index}\n                                        title={post.title}\n                                        description={post.description}\n                                        id={post._id}\n                                    />\n                                ))}\n                                <PostForm />\n                            </PostsDiv>\n                        </div>\n                    ) : (\n                            <div>\n                                <PostForm />\n                                <PostMessage>There is no posts.</PostMessage>\n                            </div>\n                        )\n\n                ) : (\n                        <PostMessage>You need to login in to see posts.</PostMessage>\n                    )\n            ) : (\n                    <div>\n                        <Loader loading={loading} />\n                    </div>\n                )}\n        </div>\n    )\n};\n\nexport default PostPage;","/home/ilad/Desktop/Dev/share-code/src/pages/sign-up-and-sign-in/index.js",[],"/home/ilad/Desktop/Dev/share-code/src/components/navbar/style.js",[],"/home/ilad/Desktop/Dev/share-code/src/pages/code-page/style.js",[],"/home/ilad/Desktop/Dev/share-code/src/pages/edit-page/style.js",[],"/home/ilad/Desktop/Dev/share-code/src/pages/leaderboard-page/style.js",[],"/home/ilad/Desktop/Dev/share-code/src/pages/profile-page/style.js",[],"/home/ilad/Desktop/Dev/share-code/src/pages/post-page/style.js",[],"/home/ilad/Desktop/Dev/share-code/src/pages/home-page/style.js",[],"/home/ilad/Desktop/Dev/share-code/src/pages/404-page/style.js",[],"/home/ilad/Desktop/Dev/share-code/src/pages/sign-up-and-sign-in/style.js",[],"/home/ilad/Desktop/Dev/share-code/src/actions/deletePost.js",[],"/home/ilad/Desktop/Dev/share-code/src/components/navbar-account/index.js",[],"/home/ilad/Desktop/Dev/share-code/src/actions/followUser.js",[],"/home/ilad/Desktop/Dev/share-code/src/actions/editPost.js",[],"/home/ilad/Desktop/Dev/share-code/src/actions/getUser.js",[],"/home/ilad/Desktop/Dev/share-code/src/actions/unFollowUser.js",[],"/home/ilad/Desktop/Dev/share-code/src/actions/editBio.js",[],"/home/ilad/Desktop/Dev/share-code/src/actions/getUsers.js",[],"/home/ilad/Desktop/Dev/share-code/src/actions/getPosts.js",[],"/home/ilad/Desktop/Dev/share-code/src/components/loader/index.js",[],"/home/ilad/Desktop/Dev/share-code/src/components/post-menu/index.js",[],"/home/ilad/Desktop/Dev/share-code/src/components/profile-modal/index.js",[],"/home/ilad/Desktop/Dev/share-code/src/components/code-card/index.js",[],"/home/ilad/Desktop/Dev/share-code/src/components/leaderboard-item/index.js",[],"/home/ilad/Desktop/Dev/share-code/src/components/post-form/index.js",[],"/home/ilad/Desktop/Dev/share-code/src/components/sign-up/index.js",[],"/home/ilad/Desktop/Dev/share-code/src/components/sign-in/index.js",[],"/home/ilad/Desktop/Dev/share-code/src/actions/getPost.js",[],"/home/ilad/Desktop/Dev/share-code/src/actions/signOut.js",[],"/home/ilad/Desktop/Dev/share-code/src/components/code-card/style.js",[],"/home/ilad/Desktop/Dev/share-code/src/actions/signUp.js",[],"/home/ilad/Desktop/Dev/share-code/src/actions/addPost.js",[],"/home/ilad/Desktop/Dev/share-code/src/actions/signIn.js",[],"/home/ilad/Desktop/Dev/share-code/src/components/post-form/style.js",[],"/home/ilad/Desktop/Dev/share-code/src/components/sign-in/style.js",[],"/home/ilad/Desktop/Dev/share-code/src/components/sign-up/style.js",[],"/home/ilad/Desktop/Dev/share-code/src/api/api.js",[],"/home/ilad/Desktop/Dev/share-code/src/components/post-button/index.js",[],"/home/ilad/Desktop/Dev/share-code/src/pages/raw-page/index.js",["225","226","227"],"import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router\";\nimport getPost from \"../../actions/getPost\";\nimport IconButton from '@material-ui/core/IconButton';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\n\nconst RawPage = () => {\n\tconst { id } = useParams();\n\tconst [post, setPost] = useState({});\n\n\tuseEffect(() => {\n\t\tvar load = false;\n\t\tgetPost({\n\t\t\tid,\n\t\t\tsetPost,\n\t\t\tload,\n\t\t});\n\t}, []);\n\n\treturn (\n\t\t<div style={{ margin: '2%' }}>\n\t\t\t<pre>{post.code}</pre>\n\t\t</div>\n\t);\n};\n\nexport default RawPage;\n",{"ruleId":"228","replacedBy":"229"},{"ruleId":"230","replacedBy":"231"},{"ruleId":"232","severity":1,"message":"233","line":39,"column":8,"nodeType":"234","endLine":39,"endColumn":10,"suggestions":"235"},{"ruleId":"232","severity":1,"message":"236","line":35,"column":8,"nodeType":"234","endLine":35,"endColumn":10,"suggestions":"237"},{"ruleId":"232","severity":1,"message":"238","line":18,"column":8,"nodeType":"234","endLine":18,"endColumn":10,"suggestions":"239"},{"ruleId":"232","severity":1,"message":"238","line":44,"column":8,"nodeType":"234","endLine":44,"endColumn":10,"suggestions":"240"},{"ruleId":"241","severity":1,"message":"242","line":49,"column":44,"nodeType":"243","messageId":"244","endLine":49,"endColumn":45},{"ruleId":"232","severity":1,"message":"245","line":54,"column":8,"nodeType":"234","endLine":54,"endColumn":17,"suggestions":"246"},{"ruleId":"247","severity":1,"message":"248","line":168,"column":110,"nodeType":"249","messageId":"250","endLine":168,"endColumn":130},{"ruleId":"232","severity":1,"message":"251","line":21,"column":8,"nodeType":"234","endLine":21,"endColumn":10,"suggestions":"252"},{"ruleId":"232","severity":1,"message":"253","line":44,"column":8,"nodeType":"234","endLine":44,"endColumn":15,"suggestions":"254"},{"ruleId":"232","severity":1,"message":"251","line":25,"column":8,"nodeType":"234","endLine":25,"endColumn":10,"suggestions":"255"},{"ruleId":"256","severity":1,"message":"257","line":4,"column":8,"nodeType":"258","messageId":"259","endLine":4,"endColumn":18},{"ruleId":"256","severity":1,"message":"260","line":5,"column":8,"nodeType":"258","messageId":"259","endLine":5,"endColumn":21},{"ruleId":"232","severity":1,"message":"238","line":18,"column":5,"nodeType":"234","endLine":18,"endColumn":7,"suggestions":"261"},"no-native-reassign",["262"],"no-negated-in-lhs",["263"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isTokenExpired'. Either include it or remove the dependency array.","ArrayExpression",["264"],"React Hook useEffect has missing dependencies: 'id' and 'loading'. Either include them or remove the dependency array.",["265"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["266"],["267"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","React Hook useEffect has missing dependencies: 'user.followers', 'user.userId', and 'user.username'. Either include them or remove the dependency array.",["268"],"no-self-assign","'window.location.href' is assigned to itself.","MemberExpression","selfAssignment","React Hook useEffect has missing dependencies: 'LocalIsLogging' and 'loading'. Either include them or remove the dependency array.",["269"],"React Hook useEffect has missing dependencies: 'LocalIsLogging' and 'listOfUsers'. Either include them or remove the dependency array.",["270"],["271"],"no-unused-vars","'IconButton' is defined but never used.","Identifier","unusedVar","'ArrowBackIcon' is defined but never used.",["272"],"no-global-assign","no-unsafe-negation",{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},{"desc":"277","fix":"278"},{"desc":"277","fix":"279"},{"desc":"280","fix":"281"},{"desc":"282","fix":"283"},{"desc":"284","fix":"285"},{"desc":"282","fix":"286"},{"desc":"277","fix":"287"},"Update the dependencies array to be: [isTokenExpired]",{"range":"288","text":"289"},"Update the dependencies array to be: [id, loading]",{"range":"290","text":"291"},"Update the dependencies array to be: [id]",{"range":"292","text":"293"},{"range":"294","text":"293"},"Update the dependencies array to be: [profile, user.followers, user.userId, user.username]",{"range":"295","text":"296"},"Update the dependencies array to be: [LocalIsLogging, loading]",{"range":"297","text":"298"},"Update the dependencies array to be: [LocalIsLogging, listOfUsers, users]",{"range":"299","text":"300"},{"range":"301","text":"298"},{"range":"302","text":"293"},[1691,1693],"[isTokenExpired]",[989,991],"[id, loading]",[538,540],"[id]",[1403,1405],[1710,1719],"[profile, user.followers, user.userId, user.username]",[762,764],"[LocalIsLogging, loading]",[1412,1419],"[LocalIsLogging, listOfUsers, users]",[895,897],[435,437]]